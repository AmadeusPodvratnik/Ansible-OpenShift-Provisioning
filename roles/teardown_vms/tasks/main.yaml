---

- name: Destroy bastion for full, skip for partial teardown. Expect ignored errors if it is already destroyed.
  community.libvirt.virt:
    name: "{{ env.hostname.bastion }}"
    command: destroy
  when: bastion_teardown
  ignore_errors: true

- name: Undefine bastion for full, skip for partial teardown. Expect ignored errors if it is already undefined.
  community.libvirt.virt:
    name: "{{ env.hostname.bastion }}"
    command: undefine
  when: bastion_teardown
  ignore_errors: true

- name: Destroy bootstrap. Expect ignored errors if it is already destroyed.
  community.libvirt.virt:
    name: "{{ env.hostname.bootstrap }}"
    command: destroy
  ignore_errors: true

- name: Undefine bootstrap. Expect ignored errors if it is already undefined.
  community.libvirt.virt:
    name: "{{ env.hostname.bootstrap }}"
    command: undefine
  ignore_errors: true

- name: Destroy running control nodes. Expect ignored errors if some VMs are already destroyed.
  community.libvirt.virt:
    name: "{{ env.hostname.control[i] }}"
    command: destroy
  with_sequence: start=0 end={{(env.hostname.control | length) - 1}} stride=1
  loop_control:
    extended: yes
    index_var: i
  ignore_errors: true

- name: Undefine remaining control nodes. Expect ignored errors if some VMs are already undefined.
  community.libvirt.virt:
    name: "{{ env.hostname.control[i] }}"
    command: undefine
  with_sequence: start=0 end={{(env.hostname.control | length) - 1}} stride=1
  loop_control:
    extended: yes
    index_var: i
  ignore_errors: true

- name: Destroy running compute nodes. Expect ignored errors if some VMs are already destroyed.
  community.libvirt.virt:
    name: "{{ env.hostname.compute[i] }}"
    command: destroy
  with_sequence: start=0 end={{(env.hostname.compute | length) - 1}} stride=1
  loop_control:
    extended: yes
    index_var: i
  ignore_errors: true

- name: Undefine remaining compute nodes. Expect ignored errors if some VMs are already undefined.
  community.libvirt.virt:
    name: "{{ env.hostname.compute[i] }}"
    command: undefine
  with_sequence: start=0 end={{(env.hostname.compute | length) - 1}} stride=1
  loop_control:
    extended: yes
    index_var: i
  ignore_errors: true

- name: Destroy running infrastructure nodes, if defined. Expect ignored errors if some VMs are already destroyed.
  community.libvirt.virt:
    name: "{{ env.hostname.infra[i] }}"
    command: destroy
  with_sequence: start=0 end={{(env.hostname.infra | length) - 1}} stride=1
  loop_control:
    extended: yes
    index_var: i
  ignore_errors: true
  when: env.hostname.infra is defined

- name: Undefine remaining infrastructure nodes. Expect ignored errors if some VMs are already undefined.
  community.libvirt.virt:
    name: "{{ env.hostname.infra[i] }}"
    command: undefine
  with_sequence: start=0 end={{(env.hostname.infra | length) - 1}}  stride=1
  loop_control:
    extended: yes
    index_var: i
  ignore_errors: true
  when: env.hostname.infra is defined