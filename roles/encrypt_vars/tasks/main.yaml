---

- name: Find where the ansible.cfg file is to find project's home directory
  set_fact: 
    home_dir: "{{ ansible_config_file.split('/')[0:-1] }}" 

- name: Check if Ansible vault already exists
  tags: encrypt_vars
  stat:
    path: "{{ inventory_dir}}/vars/vault.yaml"
  register: vault_status

- name: Template Ansible Vault file from variables file
  tags: encrypt_vars
  template:
    src: vault.yaml.j2
    dest: "{{home_dir | join('/') }}/vault.yaml"
  when: vault_status.stat.exists is false

- name: Find where the ansible.cfg file is to find project's home directory for use in next step
  set_fact: 
    home_dir: "{{ ansible_config_file.split('/')[0:-1] }}"
  when: vault_status.stat.exists is false

- name: Encrypt sensitive data from variables file.
  tags: encrypt_vars
  command: "ansible-vault encrypt {{home_dir | join('/') }}/vault.yaml" 
  when: vault_status.stat.exists is false

- name: Redact sensitive data in variables file.
  tags: encrypt_vars
  yedit:
    src: "{{ inventory_dir }}/group_vars/all.yaml"
    key: "{{ item }}"
    value: REDACTED
  loop:
    - env.z.cpc_name
    - env.z.hmc.host
    - env.z.hmc.auth.pass
    - env.z.lpar.access.pass
    - env.z.lpar.access.root_pass
    - env.z.lpar.networking.ip
    - env.ftp.ip
    - env.ftp.pass
    - env.redhat.password
    - env.redhat.pull_secret
    - env.bastion.networking.ip
    - env.bastion.access.pass
    - env.bastion.access.root_pass
  loop_control:
    label: redacted
  when: vault_status.stat.exists is false
    