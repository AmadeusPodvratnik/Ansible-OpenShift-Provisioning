---

- name: Load in variables from env.yaml
  tags: setup
  include_vars: env.yaml

- name: Check for any undefined user-input variables in env.yaml. Fail if true.
  tags: setup
  fail:
    msg: Required variable "{{item}}" has not been provided in env.yaml file.
  when: vars[item] is undefined
  loop:
    - env_baseDomain
    - env_compute_arch
    - env_control_count
    - env_control_arch
    - env_metadata_name
    - env_cidr
    - env_host_prefix
    - env_network_type
    - env_service_network
    - env_fips
    - env_pullSecret
    - env_ip_kvm_host
    - env_ip_bastion
    - env_ip_bootstrap
    - env_ip_control_0
    - env_ip_control_1
    - env_ip_control_2
    - env_ip_compute_0
    - env_ip_compute_1
    - env_ssh_username
    - env_ssh_pass
    - env_ssh_ans_name
    - env_ssh_ans_pass
    - env_ssh_ocp_comm
    - env_dns_nameserver
    - env_default_gateway
    - env_netmask
    - env_ftp

- name: Populate inventory file with ip variables from env.yaml
  tags: setup
  blockinfile:
    path: inventory
    block: |
      [kvm_host]
      {{ env_ip_kvm_host }}

      [bastion]
      {{ env_ip_bastion }}

      [bootstrap]
      {{ env_ip_bootstrap }}

      [control_nodes]
      {{ env_ip_control_0 }}
      {{ env_ip_control_1 }}
      {{ env_ip_control_2 }}

      [compute_nodes]
      {{ env_ip_compute_0 }}
      {{ env_ip_compute_1 }}
    state: present
    
- name: check inventory setup
  tags: setup
  command: ansible-inventory --list
  register: inv_check
  failed_when: inv_check.rc != 0

- name: Gather facts to re-read inventory after changes made to inventory
  tags: setup
  ansible.builtin.gather_facts:

- name: fill ansible.cfg with provided variable ansible ssh key file name
  tags: setup
  ansible.builtin.lineinfile:
    path: ansible.cfg
    insertafter: '\[defaults\]'
    line: private_key_file=~/.ssh/{{ env_ssh_ans_name }}